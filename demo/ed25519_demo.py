#!/usr/bin/env python3
"""Demo of Ed25519 signature verification using RISC Zero zkVM"""

import os
import sys
import time
from pathlib import Path

os.environ['RISC0_DEV_MODE'] = '0'

# Fresh import
import pyr0
from pyr0 import serialization


# Constants
GUEST_DIR = Path(__file__).parent / "ed25519_demo_guest"
PUBLIC_KEY = "d75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a"
VALID_SIG = "e5564300c360ac729086e2cc806e828a84877f1eb8e5d974d873e065224901555fb8821590a33bacc61e39701cf9b46bd25bf5f0595bbe24655141438e7a100b"
INVALID_SIG = "3b41da0837e8f4e7b1ba8d9e0db233a22a5764c84e8870c049e7e210c512a4532dbab6222d5e98dd50fe0fb186c039fe9a0387bf43de1fbf655c101db2540b06"
MESSAGE = ""

# Build and load the guest program using the new API
print("\nBuilding guest program...")
try:
    # Build guest (auto-detects binary name from Cargo.toml)
    elf_path = pyr0.build_guest(GUEST_DIR)
    print(f"✓ Guest built at: {elf_path}")
    
    # Load the ELF
    with open(elf_path, "rb") as f:
        elf_data = f.read()
    image = pyr0.load_image(elf_data)
    print("✓ ELF loaded into image")
except pyr0.GuestBuildFailedError as e:
    print(f"❌ Build failed: {e}")
    sys.exit(1)
except pyr0.ElfNotFoundError as e:
    print(f"❌ ELF not found: {e}")
    sys.exit(1)
except Exception as e:
    print(f"❌ Unexpected error: {e}")
    sys.exit(1)

# Get and display the program's unique ID
PROGRAM_ID = image.id.hex()
print(f"✓ Program ID: {PROGRAM_ID[:16]}...{PROGRAM_ID[-16:]}")
print(f"  (Full ID: {PROGRAM_ID})")

# Test with valid signature
print("\n=== Test 1: Valid Signature ===")
pk_bytes = bytes.fromhex(PUBLIC_KEY)
sig_bytes = bytes.fromhex(VALID_SIG)
msg_bytes = MESSAGE.encode('utf-8')

# Use the new API - prove() accepts bytes directly
# The serialization helper creates the proper format for the guest
input_data = serialization.ed25519_input(pk_bytes, sig_bytes, msg_bytes)

print(f"Input size: {len(input_data)} bytes")
print("Executing and generating proof...")

# Use the new unified prove() function
start = time.time()
receipt = pyr0.prove(image, input_data)
proof_time = time.time() - start
journal = receipt.journal

print(f"Journal: {len(journal)} bytes")

if len(journal) < 4:
    print("❌ CRITICAL ERROR: Journal too short (< 4 bytes) - guest program likely crashed!")
    sys.exit(1)

# Read result status (first u8 committed, stored as 4-byte word)
import struct
result = struct.unpack('<I', journal[0:4])[0]

if result == 1:
    print("✅ Signature VALID - Test PASSED")
    # When valid, guest also commits the public key
    if len(journal) >= 36:  # 4 bytes for result + 32 bytes for public key
        public_key = journal[4:36]
        print(f"Public key in journal: {public_key.hex()[:16]}...")
elif result == 0:
    print("❌ Signature INVALID - Test FAILED")
    if len(journal) >= 8:  # Has error reason
        reason = struct.unpack('<I', journal[4:8])[0]
        if reason == 1:
            print("   Reason: Size error (invalid key or signature length)")
        elif reason == 2:
            print("   Reason: Invalid public key format")
        elif reason == 3:
            print("   Reason: Signature verification failed")
        else:
            print(f"   Reason: Unknown error code {reason}")
else:
    print(f"❌ Unexpected result: {result}")

# Proof was already generated by prove()
print(f"\nProof generated in {proof_time:.2f}s")

# Verify the receipt's program ID matches our expected program
receipt_program_id = receipt.program_id.hex()
if receipt_program_id != PROGRAM_ID:
    print(f"❌ ERROR: Program ID mismatch!")
    print(f"  Expected: {PROGRAM_ID}")
    print(f"  Got:      {receipt_program_id}")
    sys.exit(1)
print(f"✓ Program ID verified: {receipt_program_id[:16]}...{receipt_program_id[-16:]}")

# Verify the cryptographic proof
receipt.verify(image.id)  # Pass the trusted image ID
print("✓ Proof verified")

# Test with invalid signature
print("\n=== Test 2: Invalid Signature ===")
sig_bytes = bytes.fromhex(INVALID_SIG)

input_data = serialization.ed25519_input(pk_bytes, sig_bytes, msg_bytes)

# Generate proof for invalid signature test
print("Generating proof for invalid signature...")
receipt2 = pyr0.prove(image, input_data)
journal = receipt2.journal

print(f"Journal: {len(journal)} bytes")

if len(journal) < 4:
    print(f"❌ ERROR: Journal too short ({len(journal)} bytes) - guest crashed!")
    sys.exit(1)

import struct
result = struct.unpack('<I', journal[0:4])[0]
test_passed = False
if result == 0:
    print("✅ Signature correctly reported as INVALID - Test PASSED")
    if len(journal) >= 8:
        reason = struct.unpack('<I', journal[4:8])[0]
        if reason == 3:
            print("   Reason: Signature verification failed (as expected)")
    test_passed = True
elif result == 1:
    print("❌ Signature reported as VALID - Test FAILED")
else:
    print(f"❌ Unexpected result: {result}")

print("\n=== Summary ===")
if test_passed:
    print("✓ Both tests passed! The zkVM correctly validates Ed25519 signatures!")
    print("These are real cryptographic proofs in production mode.")
    sys.exit(0)
else:
    print("✗ Some tests failed")
    sys.exit(1)